#!/usr/bin/env python

import sys, os
import numpy as np
from argparse import ArgumentParser
from psycopg2 import connect

default_db = 'postgresql://localhost/abcd-test'

parser = ArgumentParser(description='import xyz files to database')
parser.add_argument('--db', 
    help=("""database connection string - 
    defaults to ABCD_DB environment variable 
    or %s if not ABCD_DB is not set""" % default_db),
    default= os.getenv('ABCD_DB', default_db))
parser.add_argument('--summarise', help='variable(s) to be summarised', nargs='+')
parser.add_argument('--keys', action='store_true')

args = parser.parse_args()

db = connect(args.db)

def summarise():
    with db:
        cursor = db.cursor()
        for arg in args.summarise:
            cursor.execute("""
with 
    frame_stats as (
        select
            min(%s) as min,
            max(%s) as max
        from frame
    ),
    histogram as (
        select
            width_bucket(%s, min, max, 12) as bucket,
            numrange(min(%s)::numeric, max(%s)::numeric, '[]') as range,
            count(*) as freq
        from frame, frame_stats
        group by bucket
        order by bucket
    )
select
    range,
    freq,
    repeat('â– ', ( freq::float / max(freq) over() * 30 )::int) as bar
from histogram""" % (5*(arg,)))
            for result in cursor:
                print("%12f %12f %6d %s" % (result[0].lower, result[0].upper, result[1], result[2]))

def keys():
    with db:
        cursor = db.cursor()
        cursor.execute("select count(*) from frame")
        total_frames = cursor.fetchone()[0]
        print("%10s %10d %s"%("", total_frames, "total frames"))

        cursor.execute("select * from frame_keys")
        print('frame keys')
        print('%10s %10s %10s'%('percent','count','key'))
        print('----------')
        for count, key in cursor:
            print("%10.2f %10d %s"%(100*count/total_frames, count, key))

        cursor.execute("select * from atom_keys")
        print('atom keys')
        print('%10s %10s %10s'%('percent','count','key'))
        print('----------')
        for count, key in cursor:
            print("%10.2f %10d %s"%(100*count/total_frames, count, key))

if args.summarise:
    summarise()
if args.keys:
    keys()
